USE CLASSICMODELS;

CALL GERAR_PEDIDO(103, 1166, @RESUL);
select @resul;


CREATE TABLE CARRINHO_COMPRA(
CODIGOPRODUTOC VARCHAR(15) NOT NULL,
QUANTIDADEC INT NOT NULL,
PRECOC DECIMAL(10,2) NOT NULL,
CODIGOCLIENTEC INT NOT NULL,
PRIMARY KEY (CODIGOCLIENTEC, CODIGOPRODUTOC)
)ENGINE = InnoDB;
SELECT * FROM CARRINHO_COMPRA;

DROP PROCEDURE GERAR_PEDIDO;
DELIMITER $
CREATE PROCEDURE GERAR_PEDIDO(IN PARAM_CODIGOCLIENTE INT, IN PARAM_CODIGOVENDEDOR INT, OUT var_RESULTADO VARCHAR(200))
BEGIN
	DECLARE EXISTE INT DEFAULT 0; 
    DECLARE NUMEROPRODUTOS INT DEFAULT 0;
    DECLARE QUANTIDADEPRODUTOS INT DEFAULT 0;
    DECLARE VAR_NUMEROPEDIDO INT DEFAULT 0;
    DECLARE CODIGOPRODUTO VARCHAR(15) DEFAULT NULL;
    DECLARE PRECO DECIMAL(10,2) DEFAULT 0.00;
    DECLARE RESULTADO VARCHAR(200) DEFAULT NULL;
    
    DECLARE DONE BOOL DEFAULT FALSE;
    DECLARE VAR_PRODUTO VARCHAR(50);
    DECLARE CURSOR_LISTA_PRODUTO CURSOR
		FOR 
			SELECT CODIGOPRODUTOC, PRECOC, QUANTIDADEC 
            FROM CARRINHO_COMPRA
            WHERE CODIGOCLIENTEC = PARAM_CODIGOCLIENTE;
	
	DECLARE CONTINUE HANDLER 
		FOR NOT FOUND SET DONE = true;
   
    
    
	SELECT IFNULL(COUNT(CUSTOMERNUMBER),0) INTO EXISTE
		FROM customers
        WHERE CUSTOMERNUMBER = PARAM_CODIGOCLIENTE;
        
	IF EXISTE = 0 THEN
		SET RESULTADO = CONCAT('O codigo ', PARAM_CODIGOCLIENTE,' do cliente, é invalido');
        SET EXISTE = 0;
	ELSE 
		SELECT IFNULL((COUNT(EMPLOYEENUMBER)),0) INTO EXISTE 
		FROM EMPLOYEES 
        WHERE EMPLOYEENUMBER = PARAM_CODIGOVENDEDOR;
        
			IF EXISTE = 0 THEN
				SET RESULTADO = CONCAT('O codigo ', PARAM_CODIGOVENDEDOR,' do vendedor, é invalido');
                SET EXISTE = 0;
			ELSE
				SELECT IFNULL(COUNT(CODIGOCLIENTEC),0) INTO EXISTE
				FROM CARRINHO_COMPRA 
				WHERE CODIGOCLIENTEC = PARAM_CODIGOCLIENTE;
				
					IF EXISTE = 0 THEN
						SET RESULTADO = CONCAT('O codigo ', PARAM_CODIGOCLIENTE,' do cliente não está no carrinho');
						SET EXISTE = 0;
					ELSE

						SELECT MAX(ORDERNUMBER) + 1 INTO VAR_NUMEROPEDIDO FROM ORDERS;
                        
						START TRANSACTION;
                         
							INSERT INTO ORDERS 
							(ORDERNUMBER, ORDERDATE, REQUIREDDATE, shippeddate, STATUS, comments, CUSTOMERNUMBER)
							VALUES (VAR_NUMEROPEDIDO, CURDATE() , CURDATE()+7,'', 'processing','', PARAM_CODIGOCLIENTE);
							
                            SELECT IFNULL(COUNT(CODIGOPRODUTOC),0) INTO NUMEROPRODUTOS 
							FROM CARRINHO_COMPRA 
							WHERE CODIGOCLIENTEC = PARAM_CODIGOCLIENTE LIMIT 1;
								IF NUMEROPRODUTOS = 0 THEN
									SET RESULTADO = 'Não tem produtos no carrinho';		
                                    
								ELSE
									
                                    
                                    
									-- WHILE CONTA < NUMEROPRODUTOS DO
										OPEN CURSOR_LISTA_PRODUTO;
                                        PROCESS_LISTAPRODUTO: LOOP 
                                        FETCH CURSOR_LISTA_PRODUTO INTO CODIGOPRODUTO, PRECO, QUANTIDADEPRODUTOS;
                                        
                                        IF DONE = TRUE THEN
												LEAVE PROCESS_LISTAPRODUTO;
											END IF;
											
                                            
                                        
										CALL GERAR_ITEM_PEDIDO(CODIGOPRODUTO, QUANTIDADEPRODUTOS, PRECO, VAR_NUMEROPEDIDO, @RESULTAD);
                                        
                                        UPDATE 	CUSTOMERS
										SET salesRepEmployeeNumber = PARAM_CODIGOVENDEDOR
										WHERE CUSTOMERNUMBER = PARAM_CODIGOCLIENTE;
                                        
                                        SET RESULTADO = @RESULTAD;
										COMMIT;
								
                                      
                                        
                                        
									-- END WHILE;
                                    END LOOP;
                                    
                                    CLOSE CURSOR_LISTA_PRODUTO;
                                    
								END IF;
					END IF;
        END IF;
	END IF;
    
    SET var_RESULTADO = RESULTADO;
END$
DELIMITER ;

DROP PROCEDURE GERAR_ITEM_PEDIDO;
DELIMITER $
CREATE PROCEDURE GERAR_ITEM_PEDIDO(IN VAR_CODIGOPRODUTO VARCHAR(15), IN VAR_QUANTIDADEPRODUTOS INT, IN VAR_PRECO INT, IN VAR_NUMEROPEDIDO INT, OUT VAR_RESULTADO VARCHAR(80))
BEGIN
	DECLARE CODIGO_PRODUTO INT DEFAULT 0;
    DECLARE QUANTIDADE_ESTOQUE INT DEFAULT 0;
    DECLARE RESULTADO VARCHAR(200) DEFAULT "";
    DECLARE CONTADOR INT DEFAULT 0;

    
	SELECT IFNULL(COUNT(PRODUCTCODE),0) INTO CODIGO_PRODUTO 
				FROM PRODUCTS 
				WHERE PRODUCTCODE = VAR_CODIGOPRODUTO;
				
					IF CODIGO_PRODUTO = 0 THEN
						SET RESULTADO = CONCAT(RESULTADO,'\n O codigo ', VAR_CODIGOPRODUTO,' do produto não existe na tabela products');
					
					ELSE
						SELECT QUANTITYINSTOCK INTO QUANTIDADE_ESTOQUE
                        FROM PRODUCTS WHERE PRODUCTCODE = VAR_CODIGOPRODUTO;
                        
                        IF QUANTIDADE_ESTOQUE < VAR_QUANTIDADEPRODUTOS THEN
							SET RESULTADO = CONCAT(RESULTADO,'\n Quantidade ',VAR_CODIGOPRODUTO, ' de produto em estoque insuficiente');
							
                        ELSE
							INSERT INTO ORDERDETAILS
							(ORDERNUMBER, PRODUCTCODE, QUANTITYORDERED, PRICEEACH, ORDERLINENUMBER)
							VALUES (VAR_NUMEROPEDIDO, VAR_CODIGOPRODUTO, VAR_QUANTIDADEPRODUTOS, VAR_PRECO, CONTADOR);
                            
                            UPDATE 	PRODUCTS
								SET QUANTITYINSTOCK = QUANTITYINSTOCK - VAR_QUANTIDADEPRODUTOS
								WHERE PRODUCTCODE = VAR_CODIGOPRODUTO;
                                SET RESULTADO = CONCAT(RESULTADO, '\n Sucesso na transação');
                                
                        END IF;
                    END IF; 
                   SET VAR_RESULTADO = RESULTADO ;
                   SET CONTADOR = CONTADOR +1;
END$
DELIMITER ;

CALL GERAR_PEDIDO(103, 1102, @RESUL);

INSERT INTO CUSTOMERS VALUES( 103 , 'Luiz teste', 'Fulano', 'Fulano 2', '3333-3333', 'Rua Teste 1', 'Rua teste 2', 'Belo Horizonte', 'MG', '', 'Brasil', null, 0.00);

SELECT @RESUL;
select * from customers;
select * from CARRINHO_COMPRA;
SELECT * FROM PRODUCTS;


-- customer e products = alteracao
-- order e orderdetails = insert



DROP TABLE AUDITORIA;
DROP TRIGGER TRG_ALTERAR_CLIENTE;

CREATE TABLE AUDITORIA (
	DATAMODIFICACAO DATETIME, 
    NOMETABELA VARCHAR(45),
    ACAO VARCHAR(45),
    HISTORICO TEXT
);

DELIMITER $
CREATE TRIGGER TRG_INSERIR_ORDERS AFTER INSERT ON ORDERS
FOR EACH ROW 
BEGIN 
	INSERT INTO AUDITORIA VALUES(NOW(), 'ORDERS', 'INSERIR', CONCAT('FOI INCLUIDO NA TABELA ORDERS: ', CONCAT(NEW.ORDERNUMBER,', ' ,NEW.ORDERDATE,', ' ,NEW.REQUIREDDATE,', ' , 
    NEW.shippeddate,', ' ,NEW.STATUS,', ' ,NEW.comments,', ' ,NEW.CUSTOMERNUMBER)));
END$
CREATE TRIGGER TRG_INSERIR_ORDERDETAILS AFTER INSERT ON ORDERDETAILS
FOR EACH ROW 
BEGIN 
	INSERT INTO AUDITORIA VALUES(NOW(), 'ORDERDETAILS', 'INSERIR', CONCAT('FOI INCLUIDO NA TABELA ORDERDETAILS: ', CONCAT(NEW.ORDERNUMBER,', ' ,NEW.PRODUCTCODE,', ' ,
    NEW.QUANTITYORDERED,', ' ,NEW.PRICEEACH,', ' ,NEW.ORDERLINENUMBER)));
END$


CREATE TRIGGER TRG_ALTERAR_CLIENTE AFTER UPDATE ON CUSTOMERS
FOR EACH ROW 
BEGIN 
	INSERT INTO AUDITORIA VALUES(NOW(), 'CUSTOMERS', 'UPDATE', CONCAT('FOI TROCADO NA TABELA O CODIGO DO VENDEDOR: ', OLD.salesRepEmployeeNumber, ' PARA NOVO: ', NEW.salesRepEmployeeNumber));
END$

CREATE TRIGGER TRG_ALTERAR_PRODUTO AFTER UPDATE ON PRODUCTS
FOR EACH ROW 
BEGIN 
	INSERT INTO AUDITORIA VALUES(NOW(), 'PRODUCTS', 'UPDATE', CONCAT('FOI TROCADO NA TABELA A QUANTIDADE: ', OLD.QUANTITYINSTOCK, ' PARA NOVO: ', NEW.QUANTITYINSTOCK));
END$

DELIMITER ;

SELECT * FROM AUDITORIA;